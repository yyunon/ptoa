// Copyright 2018 Delft University of Technology
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <fstream>
#include <iostream>
#include <memory>
// Apache Arrow
#include <arrow/api.h>
#include <arrow/io/api.h>
#include <fletcher/api.h>
#include <parquet/arrow/reader.h>
#include <parquet/arrow/writer.h>

#define REG_BASE 10
#define PRIM_WIDTH 64
#include <arrow/api.h>
#include <fletcher/api.h>

#ifdef SV_TEST
#include "fletcher_aws_sim.h"
#endif

#define MAX_STRBUF_SIZE 256
#define NAME_SUFFIX_LENGTH 7 // 000.rb (3 numbers, 3 chars, and a terminator)

inline double fixed_to_float(uint64_t input) {
  return ((double)input / (double)(1 << 18));
}

std::shared_ptr<arrow::RecordBatch> prepareRecordBatch(uint32_t num_val) {
  std::shared_ptr<arrow::Buffer> values;

  arrow::Result<std::shared_ptr<arrow::Buffer>> bufResult =
      arrow::AllocateBuffer(sizeof(int64_t) * num_val);
  if (bufResult.ok()) {
    values = bufResult.ValueOrDie();
  } else {
    throw std::runtime_error("Could not allocate values buffer.");
  }

  auto array =
      std::make_shared<arrow::Int64Array>(arrow::int64(), num_val, values);

  //  This function no longer exists, not sure if passing meta data is necessary
  //  auto schema_meta = metaMode(fletcher::Mode::WRITE);
  std::shared_ptr<arrow::Schema> schema = arrow::schema(
      {arrow::field("int", arrow::int64(), false)}); //, schema_meta);

  auto rb = arrow::RecordBatch::Make(schema, num_val, {array});

  return rb;
}

void setPtoaArguments(std::shared_ptr<fletcher::Platform> platform,
                      uint32_t num_val, uint64_t max_size,
                      da_t device_parquet_address) {
  dau_t mmio64_writer;

  platform->WriteMMIO(REG_BASE + 0, num_val);

  mmio64_writer.full = device_parquet_address;
  platform->WriteMMIO(REG_BASE + 1, mmio64_writer.lo);
  platform->WriteMMIO(REG_BASE + 2, mmio64_writer.hi);

  mmio64_writer.full = max_size;
  platform->WriteMMIO(REG_BASE + 3, mmio64_writer.lo);
  platform->WriteMMIO(REG_BASE + 4, mmio64_writer.hi);

  return;
}

void checkMMIO(std::shared_ptr<fletcher::Platform> platform, uint32_t num_val) {
  uint32_t value32;

  platform->ReadMMIO(REG_BASE + 0, &value32);

  std::cout << "MMIO num_val=" << value32 << ", should be " << num_val
            << std::endl;

  for (int i = 0; i < 15; i++) {
    platform->ReadMMIO(i, &value32);
  }
}
// Use standard Arrow library functions to read Arrow array from Parquet file
// Only works for Parquet version 1 style files.
std::shared_ptr<arrow::ChunkedArray> readArray(std::string hw_input_file_path) {
  std::shared_ptr<arrow::io::ReadableFile> infile;
  arrow::Result<std::shared_ptr<arrow::io::ReadableFile>> result =
      arrow::io::ReadableFile::Open(hw_input_file_path);
  if (result.ok()) {
    infile = result.ValueOrDie();
  } else {
    printf("Error opening Parquet file: code %d, error message: %s\n",
           (int)result.status().code(), result.status().message().c_str());
    exit(-1);
  }

  std::unique_ptr<parquet::arrow::FileReader> reader;
  parquet::arrow::OpenFile(infile, arrow::default_memory_pool(), &reader);

  std::shared_ptr<arrow::ChunkedArray> array;
  reader->ReadColumn(0, &array);

  return array;
}

#ifdef SV_TEST

// fw decl
int tpch_main(int argc, char **argv);
extern "C" void test_main(uint32_t *exit_code) {

  printf("tpch.cpp test_main simulation runtime entry point\n");

  char *rb_base = getenv("TEST_RECORDBATCH_BASE");
  if (rb_base) {
    // printf("TEST_RECORDBATCH_BASE: %s", rb_base ); //do not try to print this
    // because it is not terminated
  } else {
    printf("Error: TEST_RECORDBATCH_BASE not found.\n");
    printf("Please set this environment variable to the location (including "
           "the path) "
           "of the test recordbatches generated by tpch.py, excluding the "
           "number+extension suffix (000.rb).\n");
    printf("For example: `export "
           "TEST_RECORDBATCH_BASE=~/workspaces/tpch/gen/rematch`.\n");
    exit_code = 0;
    return;
  }

  char *argv[] = {(char *)"tpch", rb_base, (char *)"1", (char *)"2"};
  if (tpch_main(4, argv) == 0) {
    *exit_code = 1;
  } else {
    *exit_code = 0;
  }
}

int tpch_main(int argc, char **argv) {

#else  //! SV_TEST

// Entry point for normal operation (not simulating)
int main(int argc, char **argv) {
#endif // SV_TEST

  printf("\n\tPTOA AWS Runtime\n\n");

  // Check number of arguments.
  // TODO: CLI
  const char *hw_input_file_path =
      "/home/yyunon/Datasets/extendedprice100.parquet";
  const char *reference_parquet_file_path =
      "/home/yyunon/Datasets/extendedprice100.parquet";
  uint32_t num_val = 1;

  uint64_t file_size;
  uint8_t *file_data;

  std::vector<std::shared_ptr<arrow::RecordBatch>> batches;
  std::shared_ptr<arrow::RecordBatch> number_batch;

  // Open parquet file
  std::ifstream parquet_file;
  parquet_file.open(hw_input_file_path, std::ifstream::binary);

  if (!parquet_file.is_open()) {
    std::cerr << "Error opening Parquet file" << std::endl;
    return 1;
  }
  // Get filesize
  parquet_file.seekg(0, parquet_file.end);
  file_size = parquet_file.tellg();
  parquet_file.seekg(0, parquet_file.beg);

  // Read file data
  file_data = (uint8_t *)std::malloc(file_size);
  parquet_file.read((char *)file_data, file_size);
  long unsigned int checksum = 0;
  for (uint64_t i = 0; i < file_size; ++i) {
    checksum += file_data[i];
  }
  printf("Parquet file checksum 0x%lu\n", checksum);

  auto arrow_rb_fpga = prepareRecordBatch(num_val);
  auto result_array =
      std::dynamic_pointer_cast<arrow::Int64Array>(arrow_rb_fpga->column(0));
  auto result_buffer_raw_data = result_array->values()->mutable_data();
  auto result_buffer_size = result_array->values()->size();

  fletcher::Status status;
  std::shared_ptr<fletcher::Platform> platform;
  std::shared_ptr<fletcher::Context> context;

  // Create a Fletcher platform object, attempting to autodetect the platform.
#ifdef SV_TEST
  status = fletcher::Platform::Make("aws_sim", &platform);
#else
  // Create a Fletcher platform object, attempting to autodetect the platform.
  status = fletcher::Platform::Make("aws", &platform);
#endif

  if (!status.ok()) {
    std::cerr << "Could not create Fletcher platform." << std::endl;
    return -1;
  }

  // Initialize the platform.
#ifdef SV_TEST
  InitOptions options = {1}; // do not initialize DDR for the 1DDR version
  platform->init_data = &options;
#endif
  // Initialize the platform.
  status = platform->Init();

  if (!status.ok()) {
    std::cerr << "Could not initialize Fletcher platform." << std::endl;
    return -1;
  }

  // Create a context for our application on the platform.
  status = fletcher::Context::Make(&context, platform);

  if (!status.ok()) {
    std::cerr << "Could not create Fletcher context." << std::endl;
    return -1;
  }

  // Queue the recordbatch to our context.
  status = context->QueueRecordBatch(arrow_rb_fpga);

  // "Enable" the context, potentially copying the recordbatch to the device.
  // This depends on your platform. AWS EC2 F1 requires a copy, but OpenPOWER
  // SNAP doesn't.
  context->Enable();

  if (!status.ok()) {
    std::cerr << "Could not enable the context." << std::endl;
    return -1;
  }
  // Malloc device

  da_t device_parquet_address;
  platform->DeviceMalloc(&device_parquet_address, file_size);

  setPtoaArguments(platform, num_val, file_size, device_parquet_address);

  // Make sure all buffer memory is allocated
  memset(result_buffer_raw_data, 0, result_buffer_size);
  platform->CopyHostToDevice(file_data, device_parquet_address, file_size);
  // Create a kernel based on the context.

  // Create a kernel based on the context.
  fletcher::Kernel kernel(context);

  // Start the kernel.
  status = kernel.Reset();

  if (!status.ok()) {
    std::cerr << "Could not start the kernel." << std::endl;
    return -1;
  }

  // Start the kernel.
  status = kernel.Start();

  if (!status.ok()) {
    std::cerr << "Could not start the kernel." << std::endl;
    return -1;
  }

  // Wait for the kernel to finish.
  status = kernel.WaitForFinish();

  if (!status.ok()) {
    std::cerr << "Something went wrong waiting for the kernel to finish."
              << std::endl;
    return -1;
  }

  platform->CopyDeviceToHost(context->device_buffer(0).device_address,
                             result_buffer_raw_data, sizeof(int64_t) * num_val);

  // size_t total_arrow_size = sizeof(int64_t) * num_val;
  auto correct_array = std::dynamic_pointer_cast<arrow::Int64Array>(
      readArray(std::string(reference_parquet_file_path))->chunk(0));
  if (result_array->Equals(correct_array)) {
    std::cout << "Test passed!" << std::endl;
  } else {
    // sometimes, Equals() thinks it failed but checking the arrays does not
    // show errors std::cout << "Test Failed!" << std::endl;
    int error_count = 0;
    for (int i = 0; i < result_array->length(); i++) {
      if (result_array->Value(i) != correct_array->Value(i)) {
        error_count++;
      }
      if (i < 20) {
        std::cout << result_array->Value(i) << " " << correct_array->Value(i)
                  << std::endl;
      }
    }

    if (result_array->length() != num_val) {
      error_count++;
    }

    if (error_count == 0) {
      std::cout << "Test passed!" << std::endl;
    } else {
      std::cout << "Test failed. Found " << error_count
                << " errors in the output Arrow array" << std::endl;
    }
  }

  std::free(file_data);

  return 0;
}
